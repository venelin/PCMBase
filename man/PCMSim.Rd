% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PCM.R
\name{PCMSim}
\alias{PCMSim}
\title{Simulation of a phylogenetic comparative model on a tree}
\usage{
PCMSim(tree, model, X0, SE = matrix(0, PCMNumTraits(model),
  PCMTreeNumTips(tree)), metaI = PCMInfo(X = NULL, tree = tree, model =
  model, SE = SE, verbose = verbose), verbose = FALSE)
}
\arguments{
\item{tree}{a phylo object specifying a rooted tree.}

\item{model}{an S3 object specifying the model (see Details).}

\item{X0}{a numeric vector of length k (the number of traits) specifying the
trait values at the root of the tree.}

\item{SE}{a k x N matrix specifying the standard error for each measurement in
X. Alternatively, a k x k x N cube specifying an upper triangular k x k
Cholesky factor of the variance covariance matrix for the measurement error
for each node i=1, ..., N.
Default: \code{matrix(0.0, PCMNumTraits(model), PCMTreeNumTips(tree))}.}

\item{metaI}{a named list containg meta-information about the data and the
model.}

\item{verbose}{a logical indicating if informative messages should be written
during execution.}
}
\value{
numeric M x k matrix of values at all nodes of the tree, i.e. root,
internal and tip, where M is the number of nodes: \code{M=dim(tree$edge)[1]+1},
with indices from 1 to N=length(tree$tip.label) corresponding to tips, N+1
corresponding to the root and bigger than N+1 corresponding to internal nodes.
The function will fail in case that the length of the argument vector X0 differs
from the number of traits specified in \code{metaI$k}. Error message:
"PCMSim:: X0 must be of length ...".
}
\description{
Generate trait data on a tree according to a multivariate stochastic
model with one or several regimes
}
\details{
Internally, this function uses the \code{\link{PCMCond}} iimplementation
 for the given model class.
}
\examples{
library(data.table)
N <- 10
L <- 100.0
tr <- ape::stree(N)
tr$edge.length <- rep(L, N)
for(epoch in seq(1, L, by = 1.0)) {
  tr <- PCMTreeInsertSingletonsAtEpoch(tr, epoch)
}

model <- PCMBaseTestObjects$model_MixedGaussian_ab

PCMTreeSetPartRegimes(tr, c(`11` = 'a'), setPartition = TRUE)

set.seed(1, kind = "Mersenne-Twister", normal.kind = "Inversion")
X <- PCMSim(tr, model, X0 = rep(0, 3))

dt <- NULL
for(epoch in seq(0, L, by = 1)) {
  nodes <- PCMTreeLocateEpochOnBranches(tr, epoch)$nodes
  dtEpoch <- as.data.table(t(X[, nodes]))
  dtEpoch[, t:=epoch]
  if(epoch == 0) {
    dtEpoch[, lineage:="root"]
  } else {
    dtEpoch[, lineage:=gsub("i.*x", "x", PCMTreeGetLabels(tr)[nodes], perl = TRUE)]
  }

  dt <- rbindlist(list(dt, dtEpoch))
}

}
\seealso{
\code{\link{PCMLik}} \code{\link{PCMInfo}} \code{\link{PCMCond}}
}
